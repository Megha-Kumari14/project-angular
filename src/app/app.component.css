1)ProductController.cs:

using Microsoft.AspNetCore.Mvc;
using ProductCatalogAPI.Models;
using ProductCatalogAPI.Services;

namespace ProductCatalogAPI.Controllers
{
    [Route("api/products")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        private readonly IProductService _productService;

        public ProductsController(IProductService productService)
        {
            _productService = productService;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<ProductCreateDTO>>> GetAllProducts()
        {
            try
            {
                var products = await _productService.GetAllProductsAsync();

                var productDTOs = products.Select(p => new ProductCreateDTO
                {
                    ProductID = p.ProductID,
                    Name = p.Name,
                    Description = p.Description,
                    SKU = p.SKU,
                    CategoryID = p.CategoryID,
                    StockQuantity = p.StockQuantity,
                    Price = p.Price,
                    Currency = p.Currency
                });

                return Ok(productDTOs);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // POST: api/products
        [HttpPost]
        public async Task<ActionResult> CreateProduct([FromBody] ProductCreateDTO productCreateDTO)
        {
            if (productCreateDTO == null)
            {
                return BadRequest("Product data is invalid.");
            }

            try
            {
                bool isSkuUnique = await _productService.IsSkuUniqueAsync(productCreateDTO.SKU);
                if (!isSkuUnique)
                {
                    return Conflict(new { message = "SKU already exists." });
                }

                var result = await _productService.AddProductAsync(productCreateDTO);

                if (result.Success)
                {
                    return CreatedAtAction(nameof(GetAllProducts), new { id = result.Product.ProductID }, result.Product);
                }

                return BadRequest(result.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}

2)CategoryController.cs:
using Microsoft.AspNetCore.Mvc;
using ProductCatalogAPI.Models;
using ProductCatalogAPI.Services;

namespace ProductCatalogAPI.Controllers
{
    [Route("api/categories")]
    [ApiController]
    public class CategoriesController : ControllerBase
    {
        private readonly ICategoryService _categoryService;

        public CategoriesController(ICategoryService categoryService)
        {
            _categoryService = categoryService;
        }

        // GET: api/categories
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Category>>> GetAllCategories()
        {
            try
            {
                var categories = await _categoryService.GetAllCategoriesAsync();
                return Ok(categories);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // POST: api/categories
        [HttpPost]
        public async Task<ActionResult<Category>> CreateCategory([FromBody] Category category)
        {
            try
            {
                if (category == null)
                {
                    return BadRequest("Category data is invalid.");
                }

                var newCategory = await _categoryService.AddCategoryAsync(category);

                return CreatedAtAction(nameof(GetAllCategories), new { id = newCategory.CategoryID }, newCategory);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}

3)AppDbContext.cs:
          
using Microsoft.EntityFrameworkCore;
using ProductCatalogAPI.Models;

namespace ProductCatalogAPI.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }
        public DbSet<Product> Products { get; set; }
        public DbSet<Category> Categories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Product>()
                .HasIndex(p => p.SKU)
                .IsUnique();

            modelBuilder.Entity<Product>()
                .HasOne(p => p.Category)
                .WithMany()
                .HasForeignKey(p => p.CategoryID)
                .OnDelete(DeleteBehavior.Restrict);
        }
    }
}

4)Category.cs:
          
using System.ComponentModel.DataAnnotations;

namespace ProductCatalogAPI.Models
{
    public class Category
    {
        [Key]
        public int CategoryID { get; set; }

        [Required]
        public string? Name { get; set; }

    }
}

5)Product.cs:
using System.ComponentModel.DataAnnotations;

namespace ProductCatalogAPI.Models
{
    public class Product
    {
        [Key]
        public int ProductID { get; set; }

        [Required]
        [MaxLength(100, ErrorMessage = "Product name should not exceed 100 characters.")]
        public string? Name { get; set; }

        [Required]
        public string? Description { get; set; }

        [Required]
        [RegularExpression(@"^[A-Za-z0-9_-]+$", ErrorMessage = "SKU can only contain alphanumeric characters (A-Z, a-z, 0-9), hyphen(-), and underscore(_)")]
        public string? SKU { get; set; }

        [Required]
        public int CategoryID { get; set; }
        public Category? Category { get; set; }

        [Range(0, int.MaxValue, ErrorMessage = "Stock quantity cannot be less than zero.")]
        public int StockQuantity { get; set; }

        [Required]
        [Range(0.01, double.MaxValue, ErrorMessage = "Price must be greater than zero.")]
        public decimal Price { get; set; }

        [Required]
        public string? Currency { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
    }
}

6)ProductDTO.cs:
namespace ProductCatalogAPI.Models
{
    public class ProductCreateDTO
    {
        public int ProductID { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? SKU { get; set; }
        public int CategoryID { get; set; }
        public int StockQuantity { get; set; }
        public decimal Price { get; set; }
        public string? Currency { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;
    }
}

7)launchsettings.json:
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5014",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7033;http://localhost:5014",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

8)CategoryRepository.cs:
using Microsoft.EntityFrameworkCore;
using ProductCatalogAPI.Data;
using ProductCatalogAPI.Models;

namespace ProductCatalogAPI.Repositories
{
    public class CategoryRepository : ICategoryRepository
    {
        private readonly AppDbContext _context;

        public CategoryRepository(AppDbContext context)
        {
            _context = context;
        }
        public async Task<Category> GetByIdAsync(int categoryId)
        {
            return await _context.Categories.FirstOrDefaultAsync(c => c.CategoryID == categoryId);
        }
        public async Task<IEnumerable<Category>> GetAllAsync()
        {
            return await _context.Categories.ToListAsync();
        }

        public async Task<Category> AddAsync(Category category)
        {
            await _context.Categories.AddAsync(category);
            await _context.SaveChangesAsync();
            return category;
        }

        public async Task<bool> SaveAsync()
        {
            var result = await _context.SaveChangesAsync();
            return result > 0;
        }
    }
}

9)ICategoryRepository.cs:
using ProductCatalogAPI.Models;
namespace ProductCatalogAPI.Repositories
{
    public interface ICategoryRepository
    {
        Task<Category> GetByIdAsync(int categoryId);
        Task<IEnumerable<Category>> GetAllAsync();
        Task<Category> AddAsync(Category category);
        Task<bool> SaveAsync();
    }
}

10)IProductRepository.cs:
using ProductCatalogAPI.Models;

namespace ProductCatalogAPI.Repositories
{
    public interface IProductRepository
    {
        Task<Product> AddAsync(Product product);
        Task<IEnumerable<Product>> GetAllAsync();
        Task<bool> IsSkuUniqueAsync(string sku); 
        Task<bool> SaveAsync(); 
    }
}

  11)ProductRepository.cs:
using Microsoft.EntityFrameworkCore;
using ProductCatalogAPI.Data;
using ProductCatalogAPI.Models;

namespace ProductCatalogAPI.Repositories
{
    public class ProductRepository : IProductRepository
    {
        private readonly AppDbContext _context;

        public ProductRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<Product> AddAsync(Product product)
        {
            await _context.Products.AddAsync(product);
            await _context.SaveChangesAsync();
            return product; 
        }

        public async Task<IEnumerable<Product>> GetAllAsync()
        {
            return await _context.Products.ToListAsync();
        }

        public async Task<bool> IsSkuUniqueAsync(string sku)
        {
            return !await _context.Products.AnyAsync(p => p.SKU == sku);
        }

        public async Task<bool> SaveAsync()
        {
            var saved = await _context.SaveChangesAsync();
            return saved > 0; 
        }
    }
}

  12)CategoryServices.cs:
using ProductCatalogAPI.Models;
using ProductCatalogAPI.Repositories;

namespace ProductCatalogAPI.Services
{
    public class CategoryService : ICategoryService
    {
        private readonly ICategoryRepository _categoryRepository;

        public CategoryService(ICategoryRepository categoryRepository)
        {
            _categoryRepository = categoryRepository;
        }

        public async Task<Category> GetCategoryByIdAsync(int categoryId)
        {
            return await _categoryRepository.GetByIdAsync(categoryId);
        }

        public async Task<IEnumerable<Category>> GetAllCategoriesAsync()
        {
            return await _categoryRepository.GetAllAsync();
        }

        public async Task<Category> AddCategoryAsync(Category category)
        {
            if (string.IsNullOrEmpty(category.Name))
            {
                throw new ArgumentException("Category name cannot be empty.");
            }

            return await _categoryRepository.AddAsync(category);
        }
    }
}

13)ICategoryService.cs:

using ProductCatalogAPI.Models;

namespace ProductCatalogAPI.Services
{
    public interface ICategoryService
    {
        Task<Category> GetCategoryByIdAsync(int categoryId); 
        Task<IEnumerable<Category>> GetAllCategoriesAsync(); 
        Task<Category> AddCategoryAsync(Category category); 
    }
}

14)IProductService.cs:

using ProductCatalogAPI.Models;
namespace ProductCatalogAPI.Services
{
    public interface IProductService
    {
        Task<ServiceResult> AddProductAsync(ProductCreateDTO productCreateDTO);

        Task<IEnumerable<Product>> GetAllProductsAsync();

        Task<bool> IsSkuUniqueAsync(string sku);
    }
}

  15)ProductService.cs:

using ProductCatalogAPI.Models;
using ProductCatalogAPI.Repositories;

namespace ProductCatalogAPI.Services
{
    public class ProductService : IProductService
    {
        private readonly IProductRepository _productRepository;

        public ProductService(IProductRepository productRepository)
        {
            _productRepository = productRepository;
        }

        public async Task<bool> IsSkuUniqueAsync(string sku)
        {
            return await _productRepository.IsSkuUniqueAsync(sku);
        }
        public async Task<ServiceResult> AddProductAsync(ProductCreateDTO productCreateDTO)
        {
            try
            {
                if (string.IsNullOrEmpty(productCreateDTO.Name))
                {
                    return new ServiceResult { Success = false, Message = "Product name is required." };
                }

                if (productCreateDTO.Name.Length > 100)
                {
                    return new ServiceResult { Success = false, Message = "Product name cannot exceed 100 characters." };
                }

                if (string.IsNullOrEmpty(productCreateDTO.SKU))
                {
                    return new ServiceResult { Success = false, Message = "SKU is required." };
                }

                if (productCreateDTO.Price <= 0)
                {
                    return new ServiceResult { Success = false, Message = "Price must be greater than zero." };
                }

                bool isSkuUnique = await IsSkuUniqueAsync(productCreateDTO.SKU);
                if (!isSkuUnique)
                {
                    return new ServiceResult { Success = false, Message = "SKU already exists!" };
                }

                var product = new Product
                {
                    Name = productCreateDTO.Name,
                    Description = productCreateDTO.Description,
                    SKU = productCreateDTO.SKU,
                    CategoryID = productCreateDTO.CategoryID,
                    StockQuantity = productCreateDTO.StockQuantity,
                    Price = productCreateDTO.Price,
                    Currency = "INR",
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                var addedProduct = await _productRepository.AddAsync(product);

                return new ServiceResult
                {
                    Success = true,
                    Message = "Product added successfully.",
                    Product = addedProduct
                };
            }
            catch (Exception ex)
            {
                return new ServiceResult
                {
                    Success = false,
                    Message = ex.Message
                };
            }
        }
        public async Task<IEnumerable<Product>> GetAllProductsAsync()
        {
            return await _productRepository.GetAllAsync();
        }
    }
}

16)Utility/ServiceResult.cs:
namespace ProductCatalogAPI.Models
{
    public class ServiceResult
    {
        public bool Success { get; set; }
        public string? Message { get; set; }
        public Product? Product { get; set; } 
    }
}

17)Program.cs:

using Microsoft.EntityFrameworkCore;
using ProductCatalogAPI.Data;
using ProductCatalogAPI.Repositories;
using ProductCatalogAPI.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped<IProductService, ProductService>();
builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();
builder.Services.AddScoped<ICategoryService, CategoryService>();

builder.Services.AddControllers();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new Microsoft.OpenApi.Models.OpenApiInfo
    {
        Title = "Product Management API",
        Version = "v1",
        Description = "API for managing products and categories in a catalog",
    });
});

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowCors",
        policy =>
        {
            policy.WithOrigins("http://localhost:4200")
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        });
});

var app = builder.Build();

app.UseCors("AllowCors");

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Product Management API V1");
        c.RoutePrefix = string.Empty; 
    });
}

app.UseRouting();

app.MapControllers();

app.UseHttpsRedirection();

app.Run(); 
