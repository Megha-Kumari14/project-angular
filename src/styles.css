/* You can add global styles to this file, and also import other style files */

// auth.service.ts
import { Injectable } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private userRole: string = 'admin'; // Example role (this should be fetched from auth API)

  isAdmin(): boolean {
    return this.userRole === 'admin';
  }
}

// product-form.component.ts
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Product } from '../../../models/product';
import { ProductService } from '../product.service';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { CategoryService } from '../category.service';
import { Category } from '../../../models/category';
import { AuthService } from '../auth.service';
import { catchError, throwError } from 'rxjs';

@Component({
  selector: 'app-product-form',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './product-form.component.html',
  styleUrls: ['./product-form.component.css']
})
export class ProductFormComponent implements OnInit {
  product: Product = {
    productID: 0,
    name: '',
    description: '',
    sku: '',
    categoryID: 0,
    stockQuantity: 0,
    price: 0,
    currency: 'INR',
    createdAt: new Date(),
    updatedAt: new Date()
  };

  categories: Category[] = [];
  errorMessage: string = "";
  skuError: string = "";  // Separate SKU error field
  isLoading: boolean = false;
  
  constructor(
    private productService: ProductService,
    private categoryService: CategoryService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    if (!this.authService.isAdmin()) {
      alert('Only admins can add products!');
      this.router.navigate(['/']);
    }
    
    this.isLoading = true;
    this.categoryService.getCategories().subscribe({
      next: (categories) => {
        this.categories = categories;
        this.isLoading = false;
      },
      error: () => {
        this.errorMessage = 'Error fetching categories.';
        this.isLoading = false;
      }
    });
  }

  checkSKU(): void {
    this.skuError = ''; // Reset error before checking
    if (!this.product.sku.trim()) return;
    this.productService.checkSKUExists(this.product.sku).subscribe({
      next: (exists) => {
        this.skuError = exists ? 'SKU already exists!' : '';
        //if (exists) this.skuError = 'SKU already exists!';
      },
      error: () => {
        this.skuError = 'Error checking SKU uniqueness.';
      }
    });
  }

  onSubmit(): void {
    if (this.product.price <= 0) {
      this.errorMessage = 'Price must be greater than zero.';
      return;
    }

    if (this.skuError) return; // Prevent submission if SKU error exists
    
    this.productService.addProduct(this.product).pipe(
      catchError((err) => {
        this.errorMessage = `Error occurred (${err.message})`;
        return throwError(() => new Error(err.message));
      })
    ).subscribe({
      next: () => {
        alert('Product added successfully!');
        this.router.navigate(['/']);
      }
    });
  }
}

// product.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { Product } from '../../models/product';
import { catchError } from 'rxjs/operators';
import { environment } from '../../environments/environment';

@Injectable({ providedIn: 'root' })
export class ProductService {
  private apiUrl = `${environment.apiUrl}/products`;

  constructor(private http: HttpClient) {}

  getProduct(): Observable<Product[]> {
    return this.http.get<Product[]>(this.apiUrl).pipe(
      catchError(error => {
        console.error('Error fetching products:', error);
        return throwError(() => new Error('Failed to load products.'));
      })
    );
  }

  addProduct(product: Product): Observable<Product> {
    return this.http.post<Product>(this.apiUrl, product).pipe(
      catchError(error => {
        console.error('Error adding product:', error);
        return throwError(() => new Error('Failed to add product.'));
      })
    );
  }

  checkSKUExists(sku: string): Observable<boolean> {
    return this.http.get<boolean>(`${this.apiUrl}/check-sku/${sku}`).pipe(
      catchError(error => {
        console.error('Error checking SKU:', error);
        return throwError(() => new Error('Failed to validate SKU.'));
      })
    );
  }
}

